import random

# These are the possible moves in the game
moves = ['rock', 'paper', 'scissors']

# player class.
class Player:
    def move(self):
        return 'rock'

    def learn(self, my_move, their_move):
        pass

# This is the human.
class HumanPlayer(Player):
    def move(self):
        move = input("Enter your move (rock, paper, or scissors): ").lower()
        return move

# This player tries to copy what the human did last time.
class ReflectPlayer(Player):
    def __init__(self):
        self.last_move = None

    def learn(self, my_move, their_move):
        self.last_move = their_move

    def move(self):
        if self.last_move is None:
            return random.choice(moves)
        else:
            return self.last_move

# This player cycles through the moves one by one.
class CyclePlayer(Player):
    def __init__(self):
        self.move_index = 0

    def learn(self, my_move, their_move):
        pass 

    def move(self):
        move = moves[self.move_index]
        self.move_index = (self.move_index + 1) % len(moves)
        return move

# This is a game class that keeps track of everything.
class Game:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.p1_score = 0
        self.p2_score = 0

# Determines who the winner is 
    def beats(self, one, two):
        return ((one == 'rock' and two == 'scissors') or
                (one == 'scissors' and two == 'paper') or
                (one == 'paper' and two == 'rock'))

    def play_round(self):
        move1 = self.p1.move()
        move2 = self.p2.move()
        print(f"Player 1: {move1}  Player 2: {move2}")

        if move1 == move2:
            print("It's a tie!")  # If the moves are the same, it's a tie!
        elif self.beats(move1, move2):
            print("Player 1 wins!")  # If Player 1 wins
            self.p1_score += 1  # increase Player 1's score
        else:
            print("Player 2 wins!")  # If Player 2 wins
            self.p2_score += 1  # increase Player 2's score

    def play_game(self):
        print("Welcome to Rock, Paper, Scissors!")
        for round in range(3):  # changes rounds
            print(f"Round {round + 1}:")
            self.play_round()
        print("Game over!")
        print(f"Final Score - Player 1: {self.p1_score}, Player 2: {self.p2_score}")

if __name__ == '__main__':
    game = Game(HumanPlayer(), ReflectPlayer())
    game.play_game()
